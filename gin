#!/usr/bin/env python3
"gin - a Git index format parser"

# https://github.com/git/git/blob/master/Documentation/technical/index-format.txt

import binascii
import mmap
import struct

def parse(filename):
    with open(filename, "rb") as o:
        f = mmap.mmap(o.fileno(), 0, prot=mmap.PROT_READ)

        def read(format):
            # "All binary numbers are in network byte order."
            # Hence "!" = network order, big endian
            format = "! " + format
            bytes = f.read(struct.calcsize(format))
            return struct.unpack(format, bytes)[0]

        index = {}

        # 4-byte signature, b"DIRC"
        index["signature"] = read("4s")
        assert index["signature"] == b"DIRC", "Not a Git index file"

        # 4-byte version number
        index["version"] = read("I")
        assert index["version"] in {2, 3}, "Unsupported version: %s" % version

        # 32-bit number of index entries, i.e. 4-byte
        index["entries"] = read("I")

        yield index

        for n in range(index["entries"]):
            entry = {}

            entry["entry"] = n + 1

            entry["ctime_seconds"] = read("I")
            entry["ctime_nanoseconds"] = read("I")

            entry["mtime_seconds"] = read("I")
            entry["mtime_nanoseconds"] = read("I")

            entry["dev"] = read("I")
            entry["ino"] = read("I")

            # 4-bit object type, 3-bit unused, 9-bit unix permission
            entry["mode"] = read("I")
            entry["octal_mode"] = "%06o" % entry["mode"]

            entry["uid"] = read("I")
            entry["gid"] = read("I")
            entry["size"] = read("I")

            entry["sha1"] = f.read(20)
            entry["sha1hex"] = binascii.hexlify(entry["sha1"])

            entry["flags"] = read("H")

            # 1-bit assume-valid
            entry["assume-valid"] = bool(entry["flags"] & (1 << 15))
            # 1-bit extended, must be 0 in version 2
            entry["extended"] = bool(entry["flags"] & (1 << 14))
            # 2-bit stage (?)
            entry["stage"] = bool(entry["flags"] & (1 << 13)), bool(entry["flags"] & (1 << 12))
            # 12-bit name length, if the length is less than 0xFFF (else, 0xFFF)
            namelen = entry["flags"] & 0xFFF

            # 62 bytes so far
            entrylen = 62

            if entry["extended"] and (index["version"] == 3):
                entry["extra_flags"] = read("H")
                # 1-bit reserved
                entry["reserved"] = bool(entry["extra_flags"] & (1 << 15))
                # 1-bit skip-worktree
                entry["skip-worktree"] = bool(entry["extra_flags"] & (1 << 14))
                # 1-bit intent-to-add
                entry["intent-to-add"] = bool(entry["extra_flags"] & (1 << 13))
                # 13-bits unused
                entrylen += 2

            if namelen < 0xFFF:
                entry["name"] = f.read(namelen)
                entrylen += namelen
            else:
                name = []
                while True:
                    byte = f.read(1)
                    if byte == "\x00":
                        break
                    name.append(byte)
                entry["name"] = b"".join(name)
                entrylen += 1

            padlen = (8 - (entrylen % 8)) or 8
            nuls = f.read(padlen)
            assert set(nuls) == {0}, "NULs contained non-NUL"

            yield entry

        indexlen = len(f)
        extnumber = 1

        while f.tell() < (indexlen - 20):
            extension = {}
            extension["extension"] = extnumber
            extension["signature"] = f.read(4)
            extension["size"] = read("I")

            # Seems to exclude the above:
            # "src_offset += 8; src_offset += extsize;"
            extension["data"] = f.read(extension["size"])

            yield extension
            extnumber += 1

        checksum = {}
        checksum["sha1"] = f.read(20)
        checksum["sha1hex"] = binascii.hexlify(checksum["sha1"])
        yield checksum

        f.close()

def main(argv=None):
    import os.path
    import sys

    argv = sys.argv if (argv is None) else argv
    arglen = len(argv)
    if arglen not in {1, 2}:
        print("Usage: gin.py [ <index> ]")
        sys.exit(2)

    arg = argv[1] if (arglen == 2) else None
    if not arg:
        if os.path.isfile(".git/index"):
            arg = ".git/index"

    if os.path.isdir(arg):
        path = os.path.join(arg, ".git", "index")
        if os.path.isfile(path):
            arg = path
        else:
            print("Error: Couldn't find a .git/index file to use")
            sys.exit(1)

    if not arg:
        print("Usage: gin [ <index> ]")
        sys.exit(2)

    import pprint
    for item in parse(arg):
        pprint.pprint(item)

if __name__ == "__main__":
    main()
